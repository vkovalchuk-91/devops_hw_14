name: Create/destroy MySQL server

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the Terraform action to perform'
        required: true
        default: 'create'
        type: choice
        options:
          - 'create'
          - 'destroy'

jobs:
  process-commit-message:
    runs-on: ubuntu-latest

    steps:
      - name: Set initial Terraform status
        run: echo "TERRAFORM_STATUS=❌ Failed" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Init Terraform
        run: terraform init

      - name: Plan Terraform (create)
        if: contains(github.event.inputs.action, 'create')
        run: terraform plan

      - name: Apply Terraform (create)
        if: contains(github.event.inputs.action, 'create')
        id: apply
        run: |
          terraform apply -auto-approve

      - name: Collect status (create)
        if: contains(github.event.inputs.action, 'create')
        id: collect_status_apply
        run: |
          echo "CREATED_VPC_ID=$(terraform output created_vpc_id)" >> $GITHUB_ENV
          echo "CREATED_BASTION_SG_ID=$(terraform output created_bastion_sg_id)" >> $GITHUB_ENV
          echo "CREATED_BASTION_INSTANCE_IP=$(terraform output bastion_instance_ip)" >> $GITHUB_ENV
          echo "CREATED_RDS_DB_SG_ID=$(terraform output created_rds_sg_id)" >> $GITHUB_ENV
          echo "RDS_DB_ENDPOINT=$(terraform output rds_endpoint)" >> $GITHUB_ENV
          echo "TERRAFORM_STATUS=$([[ '${{ steps.apply.outcome }}' == 'success' ]] && echo '✅ Success')" >> $GITHUB_ENV

      - name: Send Telegram Notification (create)
        if: contains(github.event.inputs.action, 'create')
        uses: cbrgm/telegram-github-action@v1
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            *Create RDS DB Results*:
            *VPC Id*: ${{ env.CREATED_VPC_ID }}
            *Bastion Security Group Id*: ${{ env.CREATED_BASTION_SG_ID }}
            *Bastion Public IP*: ${{ env.CREATED_BASTION_INSTANCE_IP }}
            *RDS DB Security Group Id*: ${{ env.CREATED_RDS_DB_SG_ID }}
            *RDS Endpoint Id*: ${{ env.RDS_DB_ENDPOINT }}
            *Terraform Apply Status*: ${{ env.TERRAFORM_STATUS }}

      - name: Destroy Terraform (destroy)
        if: contains(github.event.inputs.action, 'destroy')
        id: destroy
        run: terraform destroy -auto-approve

      - name: Collect status (destroy)
        if: contains(github.event.inputs.action, 'destroy')
        id: collect_status_destroy
        run: |
          echo "TERRAFORM_STATUS=$([[ '${{ steps.destroy.outcome }}' == 'success' ]] && echo '✅ Success')" >> $GITHUB_ENV

      - name: Send Telegram Notification (destroy)
        if: contains(github.event.inputs.action, 'destroy')
        uses: cbrgm/telegram-github-action@v1
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            *Destroy tracked RDS DB Result*:
            *Terraform Destroy Status*: ${{ env.TERRAFORM_STATUS }}
